// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PERSONAL
}

enum Status {
  ENABLED
  DISABLED
}

enum EstadoCivil {
  S
  C
  D
  V
}

enum GrupoSanguineo {
  A_POSITIVO
  A_NEGATIVO
  B_POSITIVO
  B_NEGATIVO
  AB_POSITIVO
  AB_NEGATIVO
  O_POSITIVO
  O_NEGATIVO
}

enum Sexo {
  M
  F
}

enum TipoContrato {
  DECRETO_LEGISLATIVO_276
  CAS
  PROYECTO_INVERSION
  PRACTICANTE
}

enum TipoDesplazamiento {
  ROTACION_INTERNA
  ROTACION_VOLUNTARIA
  REASIGNACION
  DESIGNACION
  DESTACADO
  PERMUTA
  ENCARGAR
}

enum TipoDescanso {
  MEDICO
  PARTICULAR
  PRE_POSTNATAL
}

enum TipoPermisoLicenciaVacacion {
  PARTICULAR
  VACACIONES
  PERMISO_FAMILIAR
}

model Ubigeo {
  id           Int    @id @default(autoincrement())
  inei         String @unique
  reniec       String @unique
  departamento String
  provincia    String
  distrito     String

  user    User[]
  hijo    Hijo[]
  Conyuge Conyuge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dependencia {
  id        Int     @id @default(autoincrement())
  nombre    String  @unique
  direccion String?
  codigo    String  @unique

  personal                 Personal[]
  experienciasLaborales    ExperienciaLaboral[]
  contratos                Contrato[]
  renuncias                Renuncia[]
  descansos                DescansoMedico[]
  permisos                 PermisoLicenciaVacacion[]
  bonificacionesPersonales BonificacionPersonal[]
  bonificacionesFamiliares BonificacionFamiliar[]
  ascensos                 Ascenso[]                 @relation("DependenciasAscenso")
  meritos                  Merito[]
  demeritos                Demerito[]
  desplazamientos          Desplazamiento[]          @relation("DependenciasDesplazamiento")
  fichaEvaluaciones        FichaEvaluacion[]
  actasEntrega             ActaEntrega[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cargo {
  id     Int    @id @default(autoincrement())
  nombre String @unique

  personal                 Personal[]
  experienciaLaborales     ExperienciaLaboral[]
  contratos                Contrato[]
  renuncias                Renuncia[]
  descansos                DescansoMedico[]
  permisos                 PermisoLicenciaVacacion[]
  bonificacionesPersonales BonificacionPersonal[]
  bonificacionesFamiliares BonificacionFamiliar[]
  fichaEvaluaciones        FichaEvaluacion[]
  meritos                  Merito[]
  demeritos                Demerito[]
  actasEntrega             ActaEntrega[]
  ascensos                 Ascenso[]                 @relation("CargosAscenso")
  desplazamientos          Desplazamiento[]          @relation("CargosDesplazamiento")

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model User {
  id        String  @id @default(cuid())
  nombres   String
  apellidos String
  role      Role    @default(PERSONAL)
  email     String? @unique
  password  String?
  ubigeoId  Int?
  status    Status  @default(ENABLED)

  ubigeo   Ubigeo?   @relation(fields: [ubigeoId], references: [id])
  personal Personal?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Personal {
  id                   Int            @id @default(autoincrement())
  sexo                 Sexo
  dni                  String         @unique
  nAutogenerado        String
  licenciaConducir     String?
  grupoSanguineo       GrupoSanguineo
  fechaIngreso         DateTime
  unidadEstructurada   String
  fechaNacimiento      DateTime
  nacionalidad         String
  domicilio            String
  interiorUrbanizacion String?
  telefono             String?
  celular              String
  regimenPensionario   String
  nombreAfp            String?
  situacionLaboral     String
  estadoCivil          EstadoCivil
  discapacidad         Boolean
  status               Status         @default(ENABLED)

  cargoId       Int
  dependenciaId Int
  conyugeId     Int?   @unique
  userId        String @unique

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cargo       Cargo       @relation(fields: [cargoId], references: [id], onDelete: Restrict)
  dependencia Dependencia @relation(fields: [dependenciaId], references: [id], onDelete: Restrict)

  hijos                    Hijo[]
  discapacidades           Discapacidad[]
  estudios                 Estudios[]
  capacitaciones           Capacitacion[]
  experiencias             ExperienciaLaboral[]
  contratos                Contrato[]
  renuncias                Renuncia[]
  descansos                DescansoMedico[]
  permisos                 PermisoLicenciaVacacion[]
  bonificacionesPersonales BonificacionPersonal[]
  bonificacionesFamiliares BonificacionFamiliar[]
  evaluaciones             FichaEvaluacion[]
  meritos                  Merito[]
  demeritos                Demerito[]
  ascensos                 Ascenso[]
  desplazamientos          Desplazamiento[]
  actasCreadas             ActaEntrega[]             @relation("EntregaPor")
  actasRecibidas           ActaEntregaDestinatario[]
  conyuge                  Conyuge?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conyuge {
  id               Int      @id @default(autoincrement())
  personalId       Int      @unique
  nombres          String
  apellidos        String
  fechaNacimiento  DateTime
  ubigeoId         Int
  gradoInstruccion String
  ocupacion        String
  profesion        String?
  postgrado        String?
  centroTrabajo    String?
  status           Status   @default(ENABLED)

  personal Personal @relation(fields: [personalId], references: [id], onDelete: Cascade)
  ubigeo   Ubigeo   @relation(fields: [ubigeoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hijo {
  id               Int      @id @default(autoincrement())
  personalId       Int
  ubigeoId         Int
  nombres          String
  apellidos        String
  fechaNacimiento  DateTime
  gradoInstruccion String
  status           Status   @default(ENABLED)

  personal Personal @relation(fields: [personalId], references: [id], onDelete: Cascade)
  ubigeo   Ubigeo   @relation(fields: [ubigeoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discapacidad {
  id                 Int    @id @default(autoincrement())
  personalId         Int
  tipo               String
  documentoSustento  String
  organoEstructurado String
  condicionLaboral   String
  status             Status @default(ENABLED)

  personal Personal @relation(fields: [personalId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Estudios {
  id            Int     @id @default(autoincrement())
  personalId    Int
  nivel         String // formación académica (Primaria, Secundaria, Universitaria, etc.)
  periodo       String // "dd/mm/yyyy - dd/mm/yyyy" -- puede incluir en proceso o solo culminados
  institucion   String
  otrosEstudios String? // Estudios adicionales con certificación opcional
  status        Status  @default(ENABLED)

  personal Personal @relation(fields: [personalId], references: [id], onDelete: Cascade) // Relación con Personal (N:1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Capacitacion {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  centroCapacitacion String
  materia            String
  especialidad       String // profesión o especialidad
  periodo            String // "dd/mm/yyyy - dd/mm/yyyy"
  horasLectivas      Int
  fechaEmision       DateTime
  certificadoPdf     String
  status             Status   @default(ENABLED)

  personal Personal @relation(fields: [personalId], references: [id], onDelete: Cascade) // Relación con Personal (N:1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExperienciaLaboral {
  id                Int      @id @default(autoincrement())
  personalId        Int
  dependenciaId     Int?
  cargoId           Int?
  documentoSustento String // Certificado, Constancia, Resolución, etc.
  centroLabor       String // Nombre del centro de trabajo
  periodo           String // "dd/mm/yyyy - dd/mm/yyyy"
  fechaEmision      DateTime
  status            Status   @default(ENABLED)

  personal    Personal     @relation(fields: [personalId], references: [id], onDelete: Cascade) // Relación con Personal (N:1)
  dependencia Dependencia? @relation(fields: [dependenciaId], references: [id], onDelete: SetNull) // Relación con Dependencia (opcional, puede ser null si no aplica)
  cargo       Cargo?       @relation(fields: [cargoId], references: [id], onDelete: Restrict) // Relación con Cargo

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contrato {
  id                     Int          @id @default(autoincrement())
  tipoContrato           TipoContrato // Tipo de contrato (Ejemplo: CAS, Nombrado, etc.)
  condicionLaboral       String // Condición laboral específica
  resolucionNombramiento String? // Resolución de nombramiento (opcional)
  regimenLaboral         String // Régimen laboral
  nivelRemuneracion      String? // Rango salarial, ejemplo: "1000 - 1500"
  pap                    Int          @unique
  cnp                    Int          @unique
  fechaIngreso           DateTime // Fecha de inicio del contrato
  fechaCese              DateTime? // Fecha de cese (opcional, puede ser null para contratos activos)
  aniosServicio          Int? // Años de servicio acumulados (opcional)
  personalId             Int
  dependenciaId          Int
  cargoId                Int
  status                 Status       @default(ENABLED)

  personal    Personal    @relation(fields: [personalId], references: [id], onDelete: Cascade) // Relación con Personal (N:1)
  dependencia Dependencia @relation(fields: [dependenciaId], references: [id], onDelete: Restrict) // Relación con Dependencia (N:1)
  cargo       Cargo       @relation(fields: [cargoId], references: [id], onDelete: Restrict) // Relación con Cargo (N:1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Renuncia {
  id                Int      @id @default(autoincrement())
  documentoRenuncia String // Carta, resolución de renuncia
  motivoRenuncia    String // Motivo de renuncia (Particular, salud, personal)
  fechaRenuncia     DateTime // Fecha de la renuncia
  personalId        Int
  dependenciaId     Int?
  cargoId           Int
  status            Status   @default(ENABLED)

  personal    Personal     @relation(fields: [personalId], references: [id], onDelete: Cascade)
  cargo       Cargo        @relation(fields: [cargoId], references: [id])
  dependencia Dependencia? @relation(fields: [dependenciaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Desplazamiento {
  id                  Int                @id @default(autoincrement())
  tipoDesplazamiento  TipoDesplazamiento // Tipo de desplazamiento
  documentoRotacion   String // Memorando, resolución
  fechaDesplazamiento DateTime // Fecha de desplazamiento
  personalId          Int
  status              Status             @default(ENABLED)

  cargos       Cargo[]       @relation("CargosDesplazamiento") // Relación N:M con Cargo
  dependencias Dependencia[] @relation("DependenciasDesplazamiento") // Relación N:M con Dependencia
  personal     Personal      @relation(fields: [personalId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DescansoMedico {
  id                Int          @id @default(autoincrement())
  tipoDescanso      TipoDescanso
  documentoSustento String
  periodo           String // "dd/mm/yyyy - dd/mm/yyyy"
  cargoId           Int
  dependenciaId     Int
  personalId        Int
  status            Status       @default(ENABLED)

  personal    Personal    @relation(fields: [personalId], references: [id], onDelete: Cascade) // Borrado en cascada
  cargo       Cargo       @relation(fields: [cargoId], references: [id])
  dependencia Dependencia @relation(fields: [dependenciaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PermisoLicenciaVacacion {
  id                          Int                         @id @default(autoincrement())
  tipoPermisoLicenciaVacacion TipoPermisoLicenciaVacacion
  documentoSustento           String
  periodo                     String // "dd/mm/yyyy - dd/mm/yyyy"
  dependenciaId               Int
  cargoId                     Int
  personalId                  Int
  status                      Status                      @default(ENABLED)

  personal    Personal    @relation(fields: [personalId], references: [id], onDelete: Cascade)
  dependencia Dependencia @relation(fields: [dependenciaId], references: [id], onDelete: Restrict)
  cargo       Cargo       @relation(fields: [cargoId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ascenso {
  id                Int    @id @default(autoincrement())
  resolucionAscenso String
  nivelRemunerativo String // "1000 - 1500"
  pap               Int    @unique // "anterior - posterior"
  cnp               String
  personalId        Int
  status            Status @default(ENABLED)

  cargos       Cargo[]       @relation("CargosAscenso") // Relación N:M con Cargo
  dependencias Dependencia[] @relation("DependenciasAscenso") // Relación N:M con Dependencia
  personal     Personal      @relation(fields: [personalId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BonificacionPersonal {
  id                     Int    @id @default(autoincrement())
  tipoBonificacion       String
  resolucionBonificacion String
  cargoId                Int
  personalId             Int
  dependenciaId          Int
  status                 Status @default(ENABLED)

  cargo       Cargo       @relation(fields: [cargoId], references: [id])
  personal    Personal    @relation(fields: [personalId], references: [id], onDelete: Cascade)
  Dependencia Dependencia @relation(fields: [dependenciaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BonificacionFamiliar {
  id                     Int    @id @default(autoincrement())
  tipoBonificacion       String
  resolucionBonificacion String
  cargoId                Int
  dependenciaId          Int
  personalId             Int
  status                 Status @default(ENABLED)

  cargo       Cargo       @relation(fields: [cargoId], references: [id])
  personal    Personal    @relation(fields: [personalId], references: [id], onDelete: Cascade)
  Dependencia Dependencia @relation(fields: [dependenciaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FichaEvaluacion {
  id                Int      @id @default(autoincrement())
  documentoSustento String
  fechaEvaluacion   DateTime
  personalId        Int
  dependenciaId     Int
  cargoId           Int
  status            Status   @default(ENABLED)

  personal    Personal    @relation(fields: [personalId], references: [id], onDelete: Cascade)
  dependencia Dependencia @relation(fields: [dependenciaId], references: [id])
  cargo       Cargo       @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Merito {
  id                Int      @id @default(autoincrement())
  personalId        Int
  dependenciaId     Int
  cargoId           Int
  documentoSustento String // Resoluciones, Cartas, etc.
  fecha             DateTime
  status            Status   @default(ENABLED)

  personal    Personal    @relation(fields: [personalId], references: [id], onDelete: Cascade)
  dependencia Dependencia @relation(fields: [dependenciaId], references: [id])
  cargo       Cargo       @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Demerito {
  id                Int    @id @default(autoincrement())
  personalId        Int
  dependenciaId     Int
  cargoId           Int
  documentoSustento String // Resoluciones, Memorando, etc.
  tipoSancion       String // suspensión de labor sin goce de haberes, Amonestación, Papeleta de abandono
  fechaSancion      String // "dd/mm/yyyy - dd/mm/yyyy"
  status            Status @default(ENABLED)

  personal    Personal    @relation(fields: [personalId], references: [id], onDelete: Cascade)
  dependencia Dependencia @relation(fields: [dependenciaId], references: [id])
  cargo       Cargo       @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActaEntrega {
  id                   Int    @id @default(autoincrement())
  actaEntregadoPorId   Int // Personal que entrega el acta
  dependenciaOficinaId Int
  cargoId              Int
  dependenciaId        Int
  documentoSustento    String // Acta de entrega
  fecha                String // "dd/mm/yyyy - dd/mm/yyyy"
  status               Status @default(ENABLED)

  actaEntregadoPor Personal                  @relation("EntregaPor", fields: [actaEntregadoPorId], references: [id])
  dependencia      Dependencia               @relation(fields: [dependenciaId], references: [id])
  cargo            Cargo                     @relation(fields: [cargoId], references: [id])
  destinatarios    ActaEntregaDestinatario[] // Relación con destinatarios (muchos destinatarios)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActaEntregaDestinatario {
  id             Int @id @default(autoincrement())
  actaId         Int // ID del ActaEntrega
  destinatarioId Int // ID del Personal que es destinatario

  acta         ActaEntrega @relation(fields: [actaId], references: [id], onDelete: Cascade)
  destinatario Personal    @relation(fields: [destinatarioId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
