// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PERSONAL
}

model User {
  id        String  @id @default(cuid())
  nombres   String
  apellidos String
  role      Role    @default(PERSONAL)
  email     String? @unique
  password  String?
  ubigeoId  Int?
  status    Status  @default(ENABLED)

  ubigeo   Ubigeo?   @relation(fields: [ubigeoId], references: [id])
  personal Personal? @relation(fields: [personalId], references: [id])
  conyuge  Conyuge?  @relation(fields: [conyugeId], references: [id])
  hijo     Hijo?     @relation(fields: [hijoId], references: [id])

  personalId Int?
  conyugeId  Int?
  hijoId     Int?
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

/**
 * FICHA PERSONAL
 * ├── Datos Personales
 * ├── Estudios y Capacitación
 * ├── Discapacidad
 * └── Experiencia Laboral
 */

enum Status {
  ENABLED
  DISABLED
}

model Ubigeo {
  id           Int    @id @default(autoincrement())
  inei         String @unique
  reniec       String @unique
  departamento String
  provincia    String
  distrito     String
  status       Status @default(ENABLED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Cargo {
  id     Int    @id @default(autoincrement())
  nombre String @unique
  status Status @default(ENABLED)

  Personal                Personal[] // Relación uno a muchos (un cargo puede ser ocupado por varios empleados)
  ExperienciaLaboral      ExperienciaLaboral[]
  Contrato                Contrato[]
  RenunciaLiquidacion     RenunciaLiquidacion[]
  Desplazamiento          Desplazamiento[]
  DescansoMedico          DescansoMedico[]
  PermisoLicenciaVacacion PermisoLicenciaVacacion[]
  ascensosDel             Ascenso[]                 @relation("CargoDel")
  ascensosAl              Ascenso[]                 @relation("CargoAl")
  BonificacionPersonal    BonificacionPersonal[]
  BonificacionFamiliar    BonificacionFamiliar[]
  FichaEvaluacion         FichaEvaluacion[]
  Merito                  Merito[]
  Demerito                Demerito[]
  ActaEntrega             ActaEntrega[]
  // ConstanciaPago          ConstanciaPago[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DependenciaOficina {
  id        Int     @id @default(autoincrement())
  nombre    String  @unique
  direccion String? // idk??
  codigo    String? @unique // Código identificador opcional
  status    Status  @default(ENABLED)

  personal                Personal[]
  ExperienciaLaboral      ExperienciaLaboral[]
  Contrato                Contrato[]
  RenunciaLiquidacion     RenunciaLiquidacion[]
  desplazamientosDe       Desplazamiento[]          @relation("OficinaDe")
  desplazamientosA        Desplazamiento[]          @relation("OficinaA")
  DescansoMedico          DescansoMedico[]
  PermisoLicenciaVacacion PermisoLicenciaVacacion[]
  ascensos                Ascenso[]
  BonificacionPersonal    BonificacionPersonal[]
  BonificacionFamiliar    BonificacionFamiliar[]
  FichaEvaluacion         FichaEvaluacion[]
  Merito                  Merito[]
  Demerito                Demerito[]
  ActaEntrega             ActaEntrega[]
  // ConstanciaPago          ConstanciaPago[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EstadoCivil {
  S
  C
  D
  V
}

enum GrupoSanguineo {
  A_POSITIVO
  A_NEGATIVO
  B_POSITIVO
  B_NEGATIVO
  AB_POSITIVO
  AB_NEGATIVO
  O_POSITIVO
  O_NEGATIVO
}

enum Sexo {
  M
  F
}

model Personal {
  id     Int    @id @default(autoincrement())
  userId String @unique

  sexo                 Sexo
  edad                 Int
  dni                  String         @unique
  nAutogenerado        String
  licenciaConducir     String?
  grupoSanguineo       GrupoSanguineo
  fechaIngreso         DateTime
  unidadEstructurada   String
  fechaNacimiento      DateTime
  nacionalidad         String
  domicilio            String
  interiorUrbanizacion String?
  telefono             String?
  celular              String
  regimenPensionario   String
  nombreAfp            String?
  situacionLaboral     String
  estadoCivil          EstadoCivil
  discapacidad         Boolean
  status               Status         @default(ENABLED)

  cargoId              Int
  dependenciaOficinaId Int
  discapacidadId       Int?

  conyugeId Int? // Relación opcional a Conyuge

  DependenciaOficina      DependenciaOficina?       @relation(fields: [dependenciaOficinaId], references: [id])
  Cargo                   Cargo                     @relation(fields: [cargoId], references: [id])
  Discapacidad            Discapacidad?
  hijos                   Hijo[]                    @relation("PersonalHijos")
  estudios                Estudios[]
  capacitaciones          Capacitacion[]
  experiencias            ExperienciaLaboral[]
  contratos               Contrato[]
  RenunciaLiquidacion     RenunciaLiquidacion[]
  Desplazamiento          Desplazamiento[]
  DescansoMedico          DescansoMedico[]
  PermisoLicenciaVacacion PermisoLicenciaVacacion[]
  Ascenso                 Ascenso[]
  BonificacionPersonal    BonificacionPersonal[]
  BonificacionFamiliar    BonificacionFamiliar[]
  FichaEvaluacion         FichaEvaluacion[]
  Merito                  Merito[]
  Demerito                Demerito[]
  actasEntregadas         ActaEntrega[]             @relation("EntregaPor")
  actasRecibidas          ActaEntrega[]             @relation("RecibidoPor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Conyuge   Conyuge?
  User      User[]
}

model Conyuge {
  id     Int @id @default(autoincrement())
  userId Int @unique

  personal   Personal @relation(fields: [personalId], references: [id])
  personalId Int      @unique // Cada conyuge pertenece a un solo Personal

  fechaNacimiento  DateTime
  gradoInstruccion String
  profesion        String?
  ocupacion        String?
  centroTrabajo    String?
  postgrado        String?
  status           Status   @default(ENABLED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Hijo {
  id     Int @id @default(autoincrement())
  userId Int @unique

  personalId       Int
  fechaNacimiento  DateTime
  edad             Int
  gradoInstruccion String
  status           Status   @default(ENABLED)

  personales Personal[] @relation("PersonalHijos")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Discapacidad {
  id                 Int    @id @default(autoincrement())
  personalId         Int    @unique
  tipo               String
  documentoSustento  String
  organoEstructurado String // idk ???
  condicionLaboral   String // como? Personal > situacionLaboral
  status             Status @default(ENABLED)

  personal Personal @relation(fields: [personalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Estudios {
  id            Int     @id @default(autoincrement())
  personalId    Int
  nivel         String // formacion académica |Primaria Completa, Primaria Incompleta, Incompleta, Universitario Secundaria Completa, Secundaria Completa, Universitario Incompleta, Bachiller, Titulado, Postgrado, Técnico Completo, Técnico Incompleta, Técnico Egresado, Técnico Titulado
  periodo       String // "dd/mm/yyyy - dd/mm/yyyy" -- solo estudios culminados o en proceso tambien?
  institucion   String
  otrosEstudios String? // Estudios adicionales con certificación opcional ??
  status        Status  @default(ENABLED)

  personal Personal @relation(fields: [personalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Capacitacion {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  centroCapacitacion String
  materia            String
  especialidad       String // profesión o especialidad
  periodo            String // "dd/mm/yyyy - dd/mm/yyyy" -- solo capacitaciones culminadas o en proceso tambien?
  horasLectivas      Int
  fechaEmision       DateTime
  certificadoPdf     String
  status             Status   @default(ENABLED)

  personal Personal @relation(fields: [personalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// sector publico | sector privado | otro
model ExperienciaLaboral {
  id                   Int      @id @default(autoincrement())
  personalId           Int
  documentoSustento    String // Certificado, Constancia, Resolución, CAS, Locación de servicio
  centroLabor          String
  dependenciaOficinaId Int
  cargoId              Int
  periodo              String // "dd/mm/yyyy - dd/mm/yyyy"
  fechaEmision         DateTime
  status               Status   @default(ENABLED)

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * SITUACIÓN LABORAL
 * ├── Contratos y Nombramiento
 * ├── Renuncia y Liquidación
 * ├── Desplazamiento
 * ├── Descanso Médico
 * ├── Permisos / Licencias / Vacaciones
 * └── Ascensos
 */
enum TipoContrato {
  DECRETO_LEGISLATIVO_276
  CAS
  PROYECTO_INVERSION
  PRACTICANTE
}

model Contrato {
  id                     Int          @id @default(autoincrement())
  tipoContrato           TipoContrato
  condicionLaboral       String
  resolucionNombramiento String?
  regimenLaboral         String
  nivelRemuneracion      String? // min - max, ejemplo: 1000 - 1500
  pap                    String?
  cnp                    String?
  fechaIngreso           DateTime
  fechaCese              DateTime?
  aniosServicio          Int?
  personalId             Int
  dependenciaOficinaId   Int
  cargoId                Int
  status                 Status       @default(ENABLED)

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RenunciaLiquidacion {
  id                   Int      @id @default(autoincrement())
  documentoRenuncia    String // Carta, resolución de renuncia
  motivoRenuncia       String // Motivo de renuncia (Particular, salud, personal)
  fechaRenuncia        DateTime // Fecha de la renuncia
  personalId           Int
  dependenciaOficinaId Int
  cargoId              Int
  status               Status   @default(ENABLED)

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TipoDesplazamiento {
  ROTACION_INTERNA
  ROTACION_VOLUNTARIA
  REASIGNACION
  DESIGNACION
  DESTACADO
  PERMUTA
  ENCARGAR
}

model Desplazamiento {
  id                     Int                @id @default(autoincrement())
  tipoDesplazamiento     TipoDesplazamiento // Tipo de desplazamiento
  documentoRotacion      String // Memorando, resolución
  fechaDesplazamiento    DateTime // Fecha de desplazamiento
  dependenciaOficinaDeId Int
  dependenciaOficinaAId  Int
  cargoId                Int
  personalId             Int
  status                 Status             @default(ENABLED)

  personal             Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficinaDe DependenciaOficina @relation("OficinaDe", fields: [dependenciaOficinaDeId], references: [id])
  dependenciaOficinaA  DependenciaOficina @relation("OficinaA", fields: [dependenciaOficinaAId], references: [id])
  cargo                Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TipoDescanso {
  MEDICO
  PARTICULAR
  PRE_POSTNATAL
}

model DescansoMedico {
  id                   Int          @id @default(autoincrement())
  tipoDescanso         TipoDescanso
  documentoSustento    String
  fechaInicioDescanso  DateTime
  fechaFinDescanso     DateTime
  dependenciaOficinaId Int
  cargoId              Int
  personalId           Int
  status               Status       @default(ENABLED)

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TipoPermisoLicenciaVacacion {
  PARTICULAR
  VACACIONES
  PERMISO_FAMILIAR
}

model PermisoLicenciaVacacion {
  id                          Int                         @id @default(autoincrement())
  tipoPermisoLicenciaVacacion TipoPermisoLicenciaVacacion
  documentoSustento           String
  fechaInicioPermiso          DateTime
  fechaFinPermiso             DateTime
  dependenciaOficinaId        Int
  cargoId                     Int
  personalId                  Int
  status                      Status                      @default(ENABLED)

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ascenso {
  id                   Int    @id @default(autoincrement())
  resolucionAscenso    String
  nivelRemunerativoDel Int
  nivelRemunerativoAl  Int
  papDel               String
  papAl                String
  cnp                  String
  personalId           Int
  status               Status @default(ENABLED)
  cargoDelId           Int
  cargoAlId            Int
  dependenciaOficinaId Int

  personal           Personal            @relation(fields: [personalId], references: [id])
  cargoDelModel      Cargo               @relation("CargoDel", fields: [cargoDelId], references: [id])
  cargoAlModel       Cargo               @relation("CargoAl", fields: [cargoAlId], references: [id])
  DependenciaOficina DependenciaOficina? @relation(fields: [dependenciaOficinaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * BONIFICACIONES Y EVALUACIONES
 * ├── Bonificación Personal
 * ├── Bonificación Familiar
 * └── Ficha de Evaluación
 */
// crear otro modelo para las dos bonificaciones, se manejara por el filtrado desde el cliente
model BonificacionPersonal {
  id                     Int    @id @default(autoincrement())
  tipoBonificacion       String
  resolucionBonificacion String
  dependenciaOficinaId   Int
  cargoId                Int
  personalId             Int
  status                 Status @default(ENABLED)

  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])
  personal           Personal           @relation(fields: [personalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BonificacionFamiliar {
  id                     Int    @id @default(autoincrement())
  tipoBonificacion       String
  resolucionBonificacion String
  dependenciaOficinaId   Int
  cargoId                Int
  personalId             Int
  status                 Status @default(ENABLED)

  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])
  personal           Personal           @relation(fields: [personalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FichaEvaluacion {
  id                   Int      @id @default(autoincrement())
  documentoSustento    String
  fechaEvaluacion      DateTime
  personalId           Int
  dependenciaOficinaId Int
  cargoId              Int
  status               Status   @default(ENABLED)

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * MÉRITOS Y DEMÉRITOS
 * ├── Méritos
 * └── Deméritos
 */
model Merito {
  id                   Int      @id @default(autoincrement())
  personalId           Int
  dependenciaOficinaId Int
  cargoId              Int
  documentoSustento    String // Resoluciones, Cartas, etc.
  fecha                DateTime
  status               Status   @default(ENABLED)

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Demerito {
  id                   Int    @id @default(autoincrement())
  personalId           Int
  dependenciaOficinaId Int
  cargoId              Int
  documentoSustento    String // Resoluciones, Memorando, etc.
  tipoSancion          String // suspensión de labor sin goce de haberes, Amonestación, Papeleta de abandono
  fechaSancion         String // "dd/mm/yyyy - dd/mm/yyyy"
  status               Status @default(ENABLED)

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * DOCUMENTOS / OTROS
 * ├── Acta de Entrega
 * └── Constancia de Pagos
 */
model ActaEntrega {
  id                   Int    @id @default(autoincrement())
  actaEentregadoPorId  Int // Personal que entrega el acta
  actaRecibidoPorId    Int // Personal que recibe el acta
  dependenciaOficinaId Int
  cargoId              Int
  documentoSustento    String // Acta de entrega
  fecha                String // "dd/mm/yyyy - dd/mm/yyyy"
  status               Status @default(ENABLED)

  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])
  actaEntregadoPor   Personal           @relation("EntregaPor", fields: [actaEentregadoPorId], references: [id])
  actaRecibidoPor    Personal           @relation("RecibidoPor", fields: [actaRecibidoPorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
