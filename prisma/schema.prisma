// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Personal {
  id                   Int      @id @default(autoincrement())
  apellidoPaterno      String
  apellidoMaterno      String
  nombres              String
  sexo                 String
  edad                 Int
  dni                  String
  nroAutogenerado      String
  licenciaConducir     String
  grupoSanguineo       String
  fechaIngreso         DateTime
  fechaNacimiento      DateTime
  domicilio            String
  interiorUrbanizacion String
  telefonoFijo         String
  celular              String
  correoElectronico    String
  personalDiscapacidad Boolean
  estadoCivil          String
  cargoId              Int // tabla, 1 - M
  ubigeoId             Int // tabla, 1 - 1
  regimenPensionarioId Int // tabla, 1 - M
  situacionLaboral     String // tabla, 1 - M 
  idJerarquia          Int

  cargo                       Cargo                       @relation(fields: [cargoId], references: [id])
  ubigeo                      Ubigeo                      @relation(fields: [ubigeoId], references: [id])
  regimenPensionario          RegimenPensionario          @relation(fields: [regimenPensionarioId], references: [id])
  jerarquia                   Jerarquia                   @relation(fields: [idJerarquia], references: [id])
  conyuge                     Conyuge?
  hijos                       Hijo[]
  formacionesAcademicas       FormacionAcademica[]
  capacitaciones              Capacitacion[]
  experienciasLaborales       ExperienciaLaboral[]
  discapacidades              Discapacidad[]
  contratos                   Contrato[]
  renuncias                   Renuncia[]
  desplazamientos             Desplazamiento[]
  descansosMedicos            DescansoMedico[]
  permisosLicenciasVacaciones PermisoLicenciaVacaciones[]
  ascensos                    Ascenso[]
  bonificacionesPersonales    BonificacionPersonal[]
  bonificacionesFamiliares    BonificacionFamiliar[]
  fichasEvaluacion            FichaEvaluacion[]
  meritos                     Merito[]
  deméritos                  Demerito[]
  actasEntrega                ActaEntrega[]
  constanciasPago             ConstanciaPago[]
  Estudio                     Estudio[]
}

model Cargo {
  id     Int    @id @default(autoincrement())
  nombre String @unique

  personales            Personal[]
  ExperienciaLaboral    ExperienciaLaboral[]
  BonificacionPersonal  BonificacionPersonal[]
  FichaEvaluacion       FichaEvaluacion[]
  ascensosCargoAnterior Ascenso[]              @relation("AscensoCargoAnterior")
  ascensosCargoActual   Ascenso[]              @relation("AscensoCargoActual")
}

model Jerarquia {
  id           Int    @id @default(autoincrement())
  nombre       String
  tipo         String // "Gerencia", "Subgerencia", "Direccion", "Oficina"
  idReferencia Int

  personal Personal[]
}

model Ubigeo {
  id                 Int    @id @default(autoincrement())
  distrito           String
  provincia          String
  departamentoRegion String // lima, callao?
  nacionalidad       String

  personales Personal[]
  conyuges   Conyuge[]
  hijos      Hijo[]
}

/**
 * L. N° 29903, D. L. ° 19990
 */
model RegimenPensionario {
  id     Int    @id @default(autoincrement())
  nombre String

  personales Personal[]
}

model Conyuge {
  id                       Int      @id @default(autoincrement())
  personalId               Int      @unique
  apellidosYNombres        String
  ubigeoId                 Int // tabla, 1 - 1
  fechaNacimiento          DateTime
  gradoInstruccion         String // tabla, 1 - M
  profesion                String
  ocupacion                String
  centroTrabajo            String
  postgradoEspecializacion String

  personal Personal @relation(fields: [personalId], references: [id])
  ubigeo   Ubigeo   @relation(fields: [ubigeoId], references: [id])
}

model Hijo {
  id                Int      @id @default(autoincrement())
  personalId        Int
  apellidosYNombres String
  ubigeoId          Int // tabla, 1 - 1
  fechaNacimiento   DateTime
  edad              Int

  personal Personal @relation(fields: [personalId], references: [id])
  ubigeo   Ubigeo   @relation(fields: [ubigeoId], references: [id])
}

model GradoInstruccion {
  id     Int    @id @default(autoincrement())
  nombre String
}

model FormacionAcademica {
  id           Int      @id @default(autoincrement())
  personalId   Int
  gradoId      Int // tabla, 1 - 1
  campoEstudio String
  institucion  String
  fechaInicio  DateTime
  fechaFin     DateTime

  personal Personal @relation(fields: [personalId], references: [id])
}

model Estudio {
  id                 Int    @id @default(autoincrement())
  personalId         Int
  formacionAcademica String // tabla, 1 - M
  anoInicio          Int
  anoFin             Int
  institucion        String
  otrosEstudios      String // array, pero como?

  personal Personal @relation(fields: [personalId], references: [id])
}

model Capacitacion {
  id                    Int      @id @default(autoincrement())
  personalId            Int
  centroCapacitacion    String
  materia               String
  profesionEspecialidad String
  periodoInicio         DateTime
  periodoFin            DateTime
  horasLectivas         Int
  fechaEmision          DateTime
  certificadoPdf        String // --- string[]

  personal Personal @relation(fields: [personalId], references: [id])
}

// sector publico | sector privado | otro
model ExperienciaLaboral {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  cargoId            Int // ---, tabla M - 1
  documentoSustento  String
  centroLaboral      String
  dependenciaOficina String // *** crear otro modelo
  periodoInicio      DateTime
  periodoFin         DateTime
  fechaEmision       DateTime

  personal Personal @relation(fields: [personalId], references: [id])
  cargo    Cargo    @relation(fields: [cargoId], references: [id])
}

model Discapacidad {
  id                Int    @id @default(autoincrement())
  personalId        Int
  tipoDiscapacidad  String
  documentoSustento String
  condicionLaboral  String

  personal Personal @relation(fields: [personalId], references: [id])
}

/**
 * volver a ver los contratos ( Régimen de decreto legislativo 276 | Contrato Administrativo de Servicio - CAS | D.L. 276-Proyecto de inversión)
 */
model Contrato {
  id                Int      @id @default(autoincrement())
  personalId        Int
  oficinaId         Int
  cargoEstructural  String
  regimenLaboral    String
  nivelRemuneracion String
  papCnp            String
  fechaIngreso      DateTime
  fechaCese         DateTime

  personal Personal @relation(fields: [personalId], references: [id])
  oficina  Oficina  @relation(fields: [oficinaId], references: [id])
}

model Renuncia {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  documentoRenuncia  String
  motivoRenuncia     String
  fechaRenuncia      DateTime
  dependenciaOficina String // tabla, 1 - M | trabajdor ------
  cargo              String // trabajdor cargo actual, editar: remover, ver: mantener

  personal Personal @relation(fields: [personalId], references: [id])
}

model Desplazamiento {
  id                  Int      @id @default(autoincrement())
  personalId          Int
  tipoDesplazamiento  String
  documentoRotacion   String
  fechaDesplazamiento DateTime
  oficinaOrigen       String // nuevo modelo, 1 - M
  oficinaDestino      String // nuevo modelo, 1 - M
  cargoActual         String // trabajdor cargo actual
  cargoNuevo          String // modificar al cargo actual del trabajador

  personal Personal @relation(fields: [personalId], references: [id])
}

model DescansoMedico {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  tipoDescanso       String
  documentoSustento  String
  fechaInicio        DateTime
  fechaFin           DateTime
  dependenciaOficina String // tabla, 1 - M | trabajdor ------
  cargo              String // trabajador cargo actual

  personal Personal @relation(fields: [personalId], references: [id])
}

model PermisoLicenciaVacaciones {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  tipoPermiso        String
  documentoSustento  String
  fechaInicio        DateTime
  fechaFin           DateTime
  dependenciaOficina String // tabla, 1 - M | trabajdor ------
  cargo              String // trabajador cargo actual

  personal Personal @relation(fields: [personalId], references: [id])
}

// PAP (Puesto de Asignación Personal)
// CNP (Código Nacional del Personal)
// el ascenso cambia de oficina?
model Ascenso {
  id                Int      @id @default(autoincrement())
  personalId        Int
  cargoAnteriorId   Int // tabla
  cargoActualId     Int // tabla  modificar el cargo actual
  nivelRemunerativo String
  pap               String // cambian al ascender
  cnp               String // cambian al ascender
  fechaAscenso      DateTime

  personal      Personal @relation(fields: [personalId], references: [id])
  cargoAnterior Cargo    @relation("AscensoCargoAnterior", fields: [cargoAnteriorId], references: [id])
  cargoActual   Cargo    @relation("AscensoCargoActual", fields: [cargoActualId], references: [id])
}

// documentoBonificacion, ahi se encuentra todos los detalles?
model BonificacionPersonal {
  id                    Int    @id @default(autoincrement())
  personalId            Int
  cargoId               Int // cargo actual del trabajador
  tipoBonificacion      String
  documentoBonificacion String
  dependenciaOficina    String // tabla, 1 - M | trabajdor ------

  personal Personal @relation(fields: [personalId], references: [id])
  cargo    Cargo    @relation(fields: [cargoId], references: [id])
}

model BonificacionFamiliar {
  id                    Int    @id @default(autoincrement())
  personalId            Int
  tipoBonificacion      String
  documentoBonificacion String
  dependenciaOficina    String // tabla, 1 - M | trabajdor ------
  cargo                 String // cargo actual del trabajador

  personal Personal @relation(fields: [personalId], references: [id])
}

model FichaEvaluacion {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  cargoId            Int // cargo actual del trabajador
  documentoSustento  String
  dependenciaOficina String // tabla, 1 - M | trabajdor ------
  fechaEvaluacion    DateTime

  personal Personal @relation(fields: [personalId], references: [id])
  cargo    Cargo    @relation(fields: [cargoId], references: [id])
}

model Merito {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  documentoSustento  String
  dependenciaOficina String // tabla, 1 - M | trabajdor ------
  cargo              String // cargo actual del trabajador
  fechaMerito        DateTime

  personal Personal @relation(fields: [personalId], references: [id])
}

model Demerito {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  documentoSustento  String
  tipoSancion        String
  fechaInicio        DateTime
  fechaFin           DateTime
  dependenciaOficina String // tabla, 1 - M | trabajdor ------
  cargo              String // cargo actual del trabajador

  personal Personal @relation(fields: [personalId], references: [id])
}

model ActaEntrega {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  personaRecibeActa  String
  documentoActa      String
  dependenciaOficina String // tabla, 1 - M | trabajdor ------
  cargo              String // cargo actual del trabajador
  fechaInicio        DateTime
  fechaFin           DateTime

  personal Personal @relation(fields: [personalId], references: [id])
}

model ConstanciaPago {
  id                  Int      @id @default(autoincrement())
  personalId          Int
  documentoPago       String
  dependenciaOficina  String // tabla, 1 - M | trabajdor ------
  cargo               String // cargo actual del trabajador
  nivelRemunerativo   String // SPC, P-4??
  papCnp              String
  diasLaboradosInicio DateTime
  diasLaboradosFin    DateTime

  personal Personal @relation(fields: [personalId], references: [id])
}

model GobiernoRegional {
  id           Int     @id @default(autoincrement())
  nombre       String
  sede         String?
  codigoRegion String  @unique

  gerencias       GerenciaRegional[]
  consejos        ConsejoRegional[]
  vicegobernacion Vicegobernacion?
  procuraduria    Procuraduria?
  control         OrganoDeControl?
}

model GerenciaRegional {
  id         Int    @id @default(autoincrement())
  nombre     String
  idGobierno Int

  gobierno     GobiernoRegional    @relation(fields: [idGobierno], references: [id])
  subgerencias Subgerencia[]
  direcciones  DireccionRegional[]
  programas    ProgramaRegional[]
}

model Subgerencia {
  id         Int    @id @default(autoincrement())
  nombre     String
  idGerencia Int

  gerencia GerenciaRegional @relation(fields: [idGerencia], references: [id])
}

model DireccionRegional {
  id         Int    @id @default(autoincrement())
  nombre     String
  idGerencia Int

  gerencia GerenciaRegional @relation(fields: [idGerencia], references: [id])
  oficinas Oficina[]
}

model Oficina {
  id          Int    @id @default(autoincrement())
  nombre      String
  idDireccion Int

  direccion DireccionRegional @relation(fields: [idDireccion], references: [id])
  Contrato  Contrato[]
}

model ProgramaRegional {
  id         Int    @id @default(autoincrement())
  nombre     String
  idGerencia Int

  gerencia GerenciaRegional @relation(fields: [idGerencia], references: [id])
}

model ConsejoRegional {
  id         Int    @id @default(autoincrement())
  nombre     String
  idGobierno Int

  gobierno GobiernoRegional @relation(fields: [idGobierno], references: [id])
}

model Vicegobernacion {
  id         Int              @id @default(autoincrement())
  nombre     String
  idGobierno Int              @unique
  gobierno   GobiernoRegional @relation(fields: [idGobierno], references: [id])
}

model Procuraduria {
  id         Int    @id @default(autoincrement())
  nombre     String
  idGobierno Int    @unique

  gobierno GobiernoRegional @relation(fields: [idGobierno], references: [id])
}

model OrganoDeControl {
  id         Int    @id @default(autoincrement())
  nombre     String
  idGobierno Int    @unique

  gobierno GobiernoRegional @relation(fields: [idGobierno], references: [id])
}
