// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * --------------------------------------------------------------------------------------------------------------------
 */
/**
 * FICHA PERSONAL
 * ├── Datos Personales
 * ├── Estudios y Capacitación
 * ├── Discapacidad
 * └── Experiencia Laboral
 */
model Ubigeo {
  id           Int    @id @default(autoincrement())
  inei         String @unique
  reniec       String @unique
  departamento String
  provincia    String
  distrito     String

  Personal Personal[]
  Conyuge  Conyuge[]
  Hijo     Hijo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cargo {
  id     Int    @id @default(autoincrement())
  nombre String

  Personal                Personal[] // Relación uno a muchos (un cargo puede ser ocupado por varios empleados)
  ExperienciaLaboral      ExperienciaLaboral[]
  Contrato                Contrato[]
  RenunciaLiquidacion     RenunciaLiquidacion[]
  Desplazamiento          Desplazamiento[]
  DescansoMedico          DescansoMedico[]
  PermisoLicenciaVacacion PermisoLicenciaVacacion[]
  ascensosDel             Ascenso[]                 @relation("CargoDel")
  ascensosAl              Ascenso[]                 @relation("CargoAl")
  BonificacionPersonal    BonificacionPersonal[]
  BonificacionFamiliar    BonificacionFamiliar[]
  FichaEvaluacion         FichaEvaluacion[]
  Merito                  Merito[]
  Demerito                Demerito[]
  ActaEntrega             ActaEntrega[]
  // ConstanciaPago          ConstanciaPago[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DependenciaOficina {
  id        Int     @id @default(autoincrement())
  nombre    String  @unique
  direccion String? // idk??
  codigo    String? @unique // Código identificador opcional

  personal                Personal[]
  ExperienciaLaboral      ExperienciaLaboral[]
  Contrato                Contrato[]
  RenunciaLiquidacion     RenunciaLiquidacion[]
  desplazamientosDe       Desplazamiento[]          @relation("OficinaDe")
  desplazamientosA        Desplazamiento[]          @relation("OficinaA")
  DescansoMedico          DescansoMedico[]
  PermisoLicenciaVacacion PermisoLicenciaVacacion[]
  ascensos                Ascenso[]
  BonificacionPersonal    BonificacionPersonal[]
  BonificacionFamiliar    BonificacionFamiliar[]
  FichaEvaluacion         FichaEvaluacion[]
  Merito                  Merito[]
  Demerito                Demerito[]
  ActaEntrega             ActaEntrega[]
  // ConstanciaPago          ConstanciaPago[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EstadoCivil {
  S
  C
  D
  V
}

enum GrupoSanguineo {
  A_POSITIVO
  A_NEGATIVO
  B_POSITIVO
  B_NEGATIVO
  AB_POSITIVO
  AB_NEGATIVO
  O_POSITIVO
  O_NEGATIVO
}

enum Sexo {
  M
  F
}

model Personal {
  id                   Int            @id @default(autoincrement())
  apellidoPaterno      String
  apellidoMaterno      String
  nombres              String
  sexo                 Sexo
  edad                 Int
  dni                  String         @unique
  nAutogenerado        String
  licenciaConducir     String?
  grupoSanguineo       GrupoSanguineo
  fechaIngreso         DateTime
  unidadEstructurada   String // idk???
  fechaNacimiento      DateTime
  nacionalidad         String
  ubigeoId             Int // Relación con Ubigeo
  domicilio            String
  interiorUrbanizacion String?
  telefono             String?
  celular              String
  email                String
  regimenPensionario   String // L. N° 29903, D. L. ° 19990
  nombreAfp            String? // idk
  situacionLaboral     String // Nombrado-D-L. 276, Contratado plaza vacante, Contratado ley 30057, Contratado CAS-Indeterminado, Contratado en CAS-Temporal D.L. 1057, Contratado en proyecto de inversión, Practicantes preprofesionales-D.L. 1404, Practicante profesional-D.L. 1004
  estadoCivil          EstadoCivil
  discapacidad         Boolean

  cargoId              Int
  dependenciaOficinaId Int?
  discapacidadId       Int?
  conyugeId            Int?

  conyuge                 Conyuge?                  @relation(fields: [conyugeId], references: [id]) // Relación uno a uno con Conyuge
  ubigeo                  Ubigeo                    @relation(fields: [ubigeoId], references: [id])
  DependenciaOficina      DependenciaOficina?       @relation(fields: [dependenciaOficinaId], references: [id])
  Cargo                   Cargo                     @relation(fields: [cargoId], references: [id]) // Relación uno a uno con Cargo
  Discapacidad            Discapacidad?
  hijos                   Hijo[] // Relación muchos a muchos con Hijo (madre y padre | madre o padre)
  estudios                Estudios[]
  capacitaciones          Capacitacion[]
  experiencias            ExperienciaLaboral[]
  contratos               Contrato[]
  RenunciaLiquidacion     RenunciaLiquidacion[]
  Desplazamiento          Desplazamiento[]
  DescansoMedico          DescansoMedico[]
  PermisoLicenciaVacacion PermisoLicenciaVacacion[]
  Ascenso                 Ascenso[]
  BonificacionPersonal    BonificacionPersonal[]
  BonificacionFamiliar    BonificacionFamiliar[]
  FichaEvaluacion         FichaEvaluacion[]
  Merito                  Merito[]
  Demerito                Demerito[]
  // ConstanciaPago          ConstanciaPago[]
  actasEntregadas         ActaEntrega[]             @relation("EntregaPor")
  actasRecibidas          ActaEntrega[]             @relation("RecibidoPor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conyuge {
  id               Int      @id @default(autoincrement())
  personalId       Int      @unique
  nombres          String
  ubigeoId         Int
  fechaNacimiento  DateTime
  gradoInstruccion String
  profesion        String?
  ocupacion        String?
  centroTrabajo    String? // idk
  postgrado        String? // segun grado de instruccion

  ubigeo   Ubigeo     @relation(fields: [ubigeoId], references: [id])
  Personal Personal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hijo {
  id               Int      @id @default(autoincrement())
  personalId       Int
  nombres          String
  fechaNacimiento  DateTime
  edad             Int
  ubigeoId         Int
  gradoInstruccion String

  personales Personal[] // Relación muchos a muchos con Personal (padre/madre pueden ser múltiples)
  ubigeo     Ubigeo     @relation(fields: [ubigeoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discapacidad {
  id                 Int    @id @default(autoincrement())
  personalId         Int    @unique
  tipo               String
  documentoSustento  String
  organoEstructurado String // idk ???
  condicionLaboral   String // como? Personal > situacionLaboral

  personal Personal @relation(fields: [personalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Estudios {
  id            Int     @id @default(autoincrement())
  personalId    Int
  nivel         String // formacion académica |Primaria Completa, Primaria Incompleta, Incompleta, Universitario Secundaria Completa, Secundaria Completa, Universitario Incompleta, Bachiller, Titulado, Postgrado, Técnico Completo, Técnico Incompleta, Técnico Egresado, Técnico Titulado
  periodo       String // "dd/mm/yyyy - dd/mm/yyyy" -- solo estudios culminados o en proceso tambien?
  institucion   String
  otrosEstudios String? // Estudios adicionales con certificación opcional ??

  personal Personal @relation(fields: [personalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Capacitacion {
  id                 Int      @id @default(autoincrement())
  personalId         Int
  centroCapacitacion String
  materia            String
  especialidad       String // profesión o especialidad
  periodo            String // "dd/mm/yyyy - dd/mm/yyyy" -- solo capacitaciones culminadas o en proceso tambien?
  horasLectivas      Int
  fechaEmision       DateTime
  certificadoPdf     String

  personal Personal @relation(fields: [personalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// sector publico | sector privado | otro
model ExperienciaLaboral {
  id                   Int      @id @default(autoincrement())
  personalId           Int
  documentoSustento    String // Certificado, Constancia, Resolución, CAS, Locación de servicio
  centroLabor          String
  dependenciaOficinaId Int
  cargoId              Int
  periodo              String // "dd/mm/yyyy - dd/mm/yyyy"
  fechaEmision         DateTime

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * --------------------------------------------------------------------------------------------------------------------
 */
/**
 * SITUACIÓN LABORAL
 * ├── Contratos y Nombramiento
 * ├── Renuncia y Liquidación
 * ├── Desplazamiento
 * ├── Descanso Médico
 * ├── Permisos / Licencias / Vacaciones
 * └── Ascensos
 */
enum TipoContrato {
  DECRETO_LEGISLATIVO_276
  CAS
  PROYECTO_INVERSION
  PRACTICANTE
}

model Contrato {
  id                     Int          @id @default(autoincrement())
  tipoContrato           TipoContrato
  condicionLaboral       String
  resolucionNombramiento String?
  regimenLaboral         String
  nivelRemuneracion      String?
  pap                    String?
  cnp                    String?
  fechaIngreso           DateTime
  fechaCese              DateTime?
  aniosServicio          Int?
  // fechaNacimiento        DateTime -- no es necesario
  personalId             Int
  dependenciaOficinaId   Int
  cargoId                Int

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RenunciaLiquidacion {
  id                   Int      @id @default(autoincrement())
  documentoRenuncia    String // Carta, resolución de renuncia
  motivoRenuncia       String // Motivo de renuncia (Particular, salud, personal)
  fechaRenuncia        DateTime // Fecha de la renuncia
  personalId           Int // Relación con el personal
  dependenciaOficinaId Int // Relación con la dependencia/oficina
  cargoId              Int // Relación con el cargo

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TipoDesplazamiento {
  ROTACION_INTERNA
  ROTACION_VOLUNTARIA
  REASIGNACION
  DESIGNACION
  DESTACADO
  PERMUTA
  ENCARGAR
}

model Desplazamiento {
  id                     Int                @id @default(autoincrement())
  tipoDesplazamiento     TipoDesplazamiento // Tipo de desplazamiento
  documentoRotacion      String // Memorando, resolución
  fechaDesplazamiento    DateTime // Fecha de desplazamiento
  dependenciaOficinaDeId Int // Relación con la oficina de origen
  dependenciaOficinaAId  Int // Relación con la oficina de destino
  cargoId                Int // Relación con el cargo
  personalId             Int // Relación con el personal

  personal             Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficinaDe DependenciaOficina @relation("OficinaDe", fields: [dependenciaOficinaDeId], references: [id])
  dependenciaOficinaA  DependenciaOficina @relation("OficinaA", fields: [dependenciaOficinaAId], references: [id])
  cargo                Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TipoDescanso {
  MEDICO
  PARTICULAR
  PRE_POSTNATAL
}

model DescansoMedico {
  id                   Int          @id @default(autoincrement())
  tipoDescanso         TipoDescanso // Tipo de descanso (Médico, Particular, Pre/Postnatal)
  documentoSustento    String // Documento que respalda el descanso (Memorando, resolución, certificado)
  fechaInicioDescanso  DateTime // Fecha de inicio del descanso
  fechaFinDescanso     DateTime // Fecha de fin del descanso
  dependenciaOficinaId Int // Relación con la dependencia/oficina
  cargoId              Int // Relación con el cargo
  personalId           Int // Relación con el personal

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TipoPermisoLicenciaVacacion {
  PARTICULAR
  VACACIONES
  PERMISO_FAMILIAR
}

model PermisoLicenciaVacacion {
  id                          Int                         @id @default(autoincrement())
  tipoPermisoLicenciaVacacion TipoPermisoLicenciaVacacion
  documentoSustento           String
  fechaInicioPermiso          DateTime
  fechaFinPermiso             DateTime
  dependenciaOficinaId        Int
  cargoId                     Int
  personalId                  Int

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ascenso {
  id                   Int    @id @default(autoincrement())
  resolucionAscenso    String
  cargoDel             String
  cargoAl              String
  nivelRemunerativoDel String
  nivelRemunerativoAl  String
  papDel               String
  papAl                String
  cnp                  String
  dependenciaId        Int
  oficinaId            Int
  personalId           Int

  cargoDelId           Int
  cargoAlId            Int
  dependenciaOficinaId Int
  personal             Personal            @relation(fields: [personalId], references: [id])
  cargoDelModel        Cargo               @relation("CargoDel", fields: [cargoDelId], references: [id])
  cargoAlModel         Cargo               @relation("CargoAl", fields: [cargoAlId], references: [id])
  DependenciaOficina   DependenciaOficina? @relation(fields: [dependenciaOficinaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * --------------------------------------------------------------------------------------------------------------------
 */
/**
 * BONIFICACIONES Y EVALUACIONES
 * ├── Bonificación Personal
 * ├── Bonificación Familiar
 * └── Ficha de Evaluación
 */
model BonificacionPersonal {
  id                     Int    @id @default(autoincrement())
  tipoBonificacion       String
  resolucionBonificacion String
  dependenciaOficinaId   Int
  cargoId                Int
  personalId             Int

  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])
  personal           Personal           @relation(fields: [personalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BonificacionFamiliar {
  id                     Int    @id @default(autoincrement())
  tipoBonificacion       String
  resolucionBonificacion String
  dependenciaOficinaId   Int
  cargoId                Int
  personalId             Int

  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])
  personal           Personal           @relation(fields: [personalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FichaEvaluacion {
  id                Int      @id @default(autoincrement())
  documentoSustento String
  fechaEvaluacion   DateTime
  personalId        Int
  dependenciaId     Int
  cargoId           Int

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * --------------------------------------------------------------------------------------------------------------------
 */
/**
 * MÉRITOS Y DEMÉRITOS
 * ├── Méritos
 * └── Deméritos
 */
model Merito {
  id                   Int      @id @default(autoincrement())
  personalId           Int
  dependenciaOficinaId Int
  cargoId              Int
  documentoSustento    String // Resoluciones, Cartas, etc.
  fecha                DateTime

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Demerito {
  id                   Int    @id @default(autoincrement())
  personalId           Int
  dependenciaOficinaId Int
  cargoId              Int
  documentoSustento    String // Resoluciones, Memorando, etc.
  tipoSancion          String // suspensión de labor sin goce de haberes, Amonestación, Papeleta de abandono
  fechaSancion         String // "dd/mm/yyyy - dd/mm/yyyy"

  personal           Personal           @relation(fields: [personalId], references: [id])
  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * --------------------------------------------------------------------------------------------------------------------
 */
/**
 * DOCUMENTOS / OTROS
 * ├── Acta de Entrega
 * └── Constancia de Pagos
 */
model ActaEntrega {
  id                   Int    @id @default(autoincrement())
  actaEentregadoPorId  Int // Personal que entrega el acta
  actaRecibidoPorId    Int // Personal que recibe el acta
  dependenciaOficinaId Int
  cargoId              Int
  documentoSustento    String // Acta de entrega
  fecha                String // "dd/mm/yyyy - dd/mm/yyyy"

  dependenciaOficina DependenciaOficina @relation(fields: [dependenciaOficinaId], references: [id])
  cargo              Cargo              @relation(fields: [cargoId], references: [id])
  actaEntregadoPor   Personal           @relation("EntregaPor", fields: [actaEentregadoPorId], references: [id])
  actaRecibidoPor    Personal           @relation("RecibidoPor", fields: [actaRecibidoPorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
